/*
 * Big Book API
 *
 * Big Book API lets you semantically search over 4 million English books by text, genre, author, ISBN, and more. You can also find books that are similar to each other.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@bigbookapi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using bigbookapi.Client;
using bigbookapi.Api;

namespace bigbookapi.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests : IDisposable
    {
        private DefaultApi instance;

        public DefaultApiTests()
        {
            instance = new DefaultApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DefaultApi
            //Assert.IsType<DefaultApi>(instance);
        }

        /// <summary>
        /// Test FindSimilarBooks
        /// </summary>
        [Fact]
        public void FindSimilarBooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal id = null;
            //decimal? number = null;
            //var response = instance.FindSimilarBooks(id, number);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test GetBookInformation
        /// </summary>
        [Fact]
        public void GetBookInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal id = null;
            //var response = instance.GetBookInformation(id);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test SearchAuthors
        /// </summary>
        [Fact]
        public void SearchAuthorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? name = null;
            //decimal? offset = null;
            //decimal? number = null;
            //var response = instance.SearchAuthors(name, offset, number);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test SearchBooks
        /// </summary>
        [Fact]
        public void SearchBooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? query = null;
            //decimal? earliestPublishYear = null;
            //decimal? latestPublishYear = null;
            //decimal? minRating = null;
            //decimal? maxRating = null;
            //string? genres = null;
            //string? authors = null;
            //string? isbn = null;
            //string? oclc = null;
            //string? sort = null;
            //string? sortDirection = null;
            //bool? groupResults = null;
            //decimal? offset = null;
            //decimal? number = null;
            //var response = instance.SearchBooks(query, earliestPublishYear, latestPublishYear, minRating, maxRating, genres, authors, isbn, oclc, sort, sortDirection, groupResults, offset, number);
            //Assert.IsType<Object>(response);
        }
    }
}
