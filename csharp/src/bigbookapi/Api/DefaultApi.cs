/*
 * Big Book API
 *
 * Big Book API lets you semantically search over 4 million English books by text, genre, author, ISBN, and more. You can also find books that are similar to each other.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@bigbookapi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using bigbookapi.Client;

namespace bigbookapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Find Similar Books
        /// </summary>
        /// <remarks>
        ///  Find books that are similar to the given book. 
        /// </remarks>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the book to which similar books should be found.</param>
        /// <param name="number">The number of similar books to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object FindSimilarBooks(decimal id, decimal? number = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Find Similar Books
        /// </summary>
        /// <remarks>
        ///  Find books that are similar to the given book. 
        /// </remarks>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the book to which similar books should be found.</param>
        /// <param name="number">The number of similar books to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> FindSimilarBooksWithHttpInfo(decimal id, decimal? number = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// Get Book Information
        /// </summary>
        /// <remarks>
        ///  Get all information about a certain book. 
        /// </remarks>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetBookInformation(decimal id, int operationIndex = 0);

        /// <summary>
        /// Get Book Information
        /// </summary>
        /// <remarks>
        ///  Get all information about a certain book. 
        /// </remarks>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetBookInformationWithHttpInfo(decimal id, int operationIndex = 0);
        /// <summary>
        /// Search Authors
        /// </summary>
        /// <remarks>
        ///  Search for book authors by name or partial name. The response contains the author&#39;s name and their id. You can then use the id in the book search. 
        /// </remarks>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The (partial/beginning) name of the author. (optional)</param>
        /// <param name="offset">The number of authors to skip in range [0,100] (optional)</param>
        /// <param name="number">The number of authors to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SearchAuthors(string? name = default(string?), decimal? offset = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Search Authors
        /// </summary>
        /// <remarks>
        ///  Search for book authors by name or partial name. The response contains the author&#39;s name and their id. You can then use the id in the book search. 
        /// </remarks>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The (partial/beginning) name of the author. (optional)</param>
        /// <param name="offset">The number of authors to skip in range [0,100] (optional)</param>
        /// <param name="number">The number of authors to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SearchAuthorsWithHttpInfo(string? name = default(string?), decimal? offset = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// Search Books
        /// </summary>
        /// <remarks>
        ///  Search and filter books based on matching a query, the ISBN, rating, and more fields. The query is semantically parsed using our own large ontology. That means you can search for \&quot;books about dogs\&quot; and will automatically also find books about \&quot;border collies\&quot; and other types without specifying them in the query. 
        /// </remarks>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="earliestPublishYear">The books must have been published after this year. (optional)</param>
        /// <param name="latestPublishYear">The books must have been published before this year. (optional)</param>
        /// <param name="minRating">The minimum rating the book must have gotten in the interval [0,1]. (optional)</param>
        /// <param name="maxRating">The maximum rating the book must have gotten in the interval [0,1]. (optional)</param>
        /// <param name="genres">A comma-separated list of  genres. Only books from any of the given genres will be returned. (optional)</param>
        /// <param name="authors">A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate. (optional)</param>
        /// <param name="isbn">Only the book matching the ISBN-13 will be returned (optional)</param>
        /// <param name="oclc">Only the book matching the OCLC will be returned (optional)</param>
        /// <param name="sort">The sorting criteria (publish-date or rating). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="groupResults">Whether to group similar editions of the same book. (optional)</param>
        /// <param name="offset">The number of books to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of books to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SearchBooks(string? query = default(string?), decimal? earliestPublishYear = default(decimal?), decimal? latestPublishYear = default(decimal?), decimal? minRating = default(decimal?), decimal? maxRating = default(decimal?), string? genres = default(string?), string? authors = default(string?), string? isbn = default(string?), string? oclc = default(string?), string? sort = default(string?), string? sortDirection = default(string?), bool? groupResults = default(bool?), decimal? offset = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Search Books
        /// </summary>
        /// <remarks>
        ///  Search and filter books based on matching a query, the ISBN, rating, and more fields. The query is semantically parsed using our own large ontology. That means you can search for \&quot;books about dogs\&quot; and will automatically also find books about \&quot;border collies\&quot; and other types without specifying them in the query. 
        /// </remarks>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="earliestPublishYear">The books must have been published after this year. (optional)</param>
        /// <param name="latestPublishYear">The books must have been published before this year. (optional)</param>
        /// <param name="minRating">The minimum rating the book must have gotten in the interval [0,1]. (optional)</param>
        /// <param name="maxRating">The maximum rating the book must have gotten in the interval [0,1]. (optional)</param>
        /// <param name="genres">A comma-separated list of  genres. Only books from any of the given genres will be returned. (optional)</param>
        /// <param name="authors">A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate. (optional)</param>
        /// <param name="isbn">Only the book matching the ISBN-13 will be returned (optional)</param>
        /// <param name="oclc">Only the book matching the OCLC will be returned (optional)</param>
        /// <param name="sort">The sorting criteria (publish-date or rating). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="groupResults">Whether to group similar editions of the same book. (optional)</param>
        /// <param name="offset">The number of books to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of books to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SearchBooksWithHttpInfo(string? query = default(string?), decimal? earliestPublishYear = default(decimal?), decimal? latestPublishYear = default(decimal?), decimal? minRating = default(decimal?), decimal? maxRating = default(decimal?), string? genres = default(string?), string? authors = default(string?), string? isbn = default(string?), string? oclc = default(string?), string? sort = default(string?), string? sortDirection = default(string?), bool? groupResults = default(bool?), decimal? offset = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Find Similar Books
        /// </summary>
        /// <remarks>
        ///  Find books that are similar to the given book. 
        /// </remarks>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the book to which similar books should be found.</param>
        /// <param name="number">The number of similar books to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> FindSimilarBooksAsync(decimal id, decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find Similar Books
        /// </summary>
        /// <remarks>
        ///  Find books that are similar to the given book. 
        /// </remarks>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the book to which similar books should be found.</param>
        /// <param name="number">The number of similar books to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FindSimilarBooksWithHttpInfoAsync(decimal id, decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Book Information
        /// </summary>
        /// <remarks>
        ///  Get all information about a certain book. 
        /// </remarks>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetBookInformationAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Book Information
        /// </summary>
        /// <remarks>
        ///  Get all information about a certain book. 
        /// </remarks>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetBookInformationWithHttpInfoAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Authors
        /// </summary>
        /// <remarks>
        ///  Search for book authors by name or partial name. The response contains the author&#39;s name and their id. You can then use the id in the book search. 
        /// </remarks>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The (partial/beginning) name of the author. (optional)</param>
        /// <param name="offset">The number of authors to skip in range [0,100] (optional)</param>
        /// <param name="number">The number of authors to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SearchAuthorsAsync(string? name = default(string?), decimal? offset = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Authors
        /// </summary>
        /// <remarks>
        ///  Search for book authors by name or partial name. The response contains the author&#39;s name and their id. You can then use the id in the book search. 
        /// </remarks>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The (partial/beginning) name of the author. (optional)</param>
        /// <param name="offset">The number of authors to skip in range [0,100] (optional)</param>
        /// <param name="number">The number of authors to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchAuthorsWithHttpInfoAsync(string? name = default(string?), decimal? offset = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Books
        /// </summary>
        /// <remarks>
        ///  Search and filter books based on matching a query, the ISBN, rating, and more fields. The query is semantically parsed using our own large ontology. That means you can search for \&quot;books about dogs\&quot; and will automatically also find books about \&quot;border collies\&quot; and other types without specifying them in the query. 
        /// </remarks>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="earliestPublishYear">The books must have been published after this year. (optional)</param>
        /// <param name="latestPublishYear">The books must have been published before this year. (optional)</param>
        /// <param name="minRating">The minimum rating the book must have gotten in the interval [0,1]. (optional)</param>
        /// <param name="maxRating">The maximum rating the book must have gotten in the interval [0,1]. (optional)</param>
        /// <param name="genres">A comma-separated list of  genres. Only books from any of the given genres will be returned. (optional)</param>
        /// <param name="authors">A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate. (optional)</param>
        /// <param name="isbn">Only the book matching the ISBN-13 will be returned (optional)</param>
        /// <param name="oclc">Only the book matching the OCLC will be returned (optional)</param>
        /// <param name="sort">The sorting criteria (publish-date or rating). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="groupResults">Whether to group similar editions of the same book. (optional)</param>
        /// <param name="offset">The number of books to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of books to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SearchBooksAsync(string? query = default(string?), decimal? earliestPublishYear = default(decimal?), decimal? latestPublishYear = default(decimal?), decimal? minRating = default(decimal?), decimal? maxRating = default(decimal?), string? genres = default(string?), string? authors = default(string?), string? isbn = default(string?), string? oclc = default(string?), string? sort = default(string?), string? sortDirection = default(string?), bool? groupResults = default(bool?), decimal? offset = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Books
        /// </summary>
        /// <remarks>
        ///  Search and filter books based on matching a query, the ISBN, rating, and more fields. The query is semantically parsed using our own large ontology. That means you can search for \&quot;books about dogs\&quot; and will automatically also find books about \&quot;border collies\&quot; and other types without specifying them in the query. 
        /// </remarks>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="earliestPublishYear">The books must have been published after this year. (optional)</param>
        /// <param name="latestPublishYear">The books must have been published before this year. (optional)</param>
        /// <param name="minRating">The minimum rating the book must have gotten in the interval [0,1]. (optional)</param>
        /// <param name="maxRating">The maximum rating the book must have gotten in the interval [0,1]. (optional)</param>
        /// <param name="genres">A comma-separated list of  genres. Only books from any of the given genres will be returned. (optional)</param>
        /// <param name="authors">A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate. (optional)</param>
        /// <param name="isbn">Only the book matching the ISBN-13 will be returned (optional)</param>
        /// <param name="oclc">Only the book matching the OCLC will be returned (optional)</param>
        /// <param name="sort">The sorting criteria (publish-date or rating). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="groupResults">Whether to group similar editions of the same book. (optional)</param>
        /// <param name="offset">The number of books to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of books to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchBooksWithHttpInfoAsync(string? query = default(string?), decimal? earliestPublishYear = default(decimal?), decimal? latestPublishYear = default(decimal?), decimal? minRating = default(decimal?), decimal? maxRating = default(decimal?), string? genres = default(string?), string? authors = default(string?), string? isbn = default(string?), string? oclc = default(string?), string? sort = default(string?), string? sortDirection = default(string?), bool? groupResults = default(bool?), decimal? offset = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private bigbookapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = bigbookapi.Client.Configuration.MergeConfigurations(
                bigbookapi.Client.GlobalConfiguration.Instance,
                new bigbookapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new bigbookapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new bigbookapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = bigbookapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(bigbookapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = bigbookapi.Client.Configuration.MergeConfigurations(
                bigbookapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new bigbookapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new bigbookapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = bigbookapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(bigbookapi.Client.ISynchronousClient client, bigbookapi.Client.IAsynchronousClient asyncClient, bigbookapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = bigbookapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public bigbookapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public bigbookapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public bigbookapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public bigbookapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Find Similar Books  Find books that are similar to the given book. 
        /// </summary>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the book to which similar books should be found.</param>
        /// <param name="number">The number of similar books to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object FindSimilarBooks(decimal id, decimal? number = default(decimal?), int operationIndex = 0)
        {
            bigbookapi.Client.ApiResponse<Object> localVarResponse = FindSimilarBooksWithHttpInfo(id, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find Similar Books  Find books that are similar to the given book. 
        /// </summary>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the book to which similar books should be found.</param>
        /// <param name="number">The number of similar books to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public bigbookapi.Client.ApiResponse<Object> FindSimilarBooksWithHttpInfo(decimal id, decimal? number = default(decimal?), int operationIndex = 0)
        {
            bigbookapi.Client.RequestOptions localVarRequestOptions = new bigbookapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = bigbookapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = bigbookapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", bigbookapi.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "DefaultApi.FindSimilarBooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/{id}/similar", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSimilarBooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find Similar Books  Find books that are similar to the given book. 
        /// </summary>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the book to which similar books should be found.</param>
        /// <param name="number">The number of similar books to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> FindSimilarBooksAsync(decimal id, decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            bigbookapi.Client.ApiResponse<Object> localVarResponse = await FindSimilarBooksWithHttpInfoAsync(id, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find Similar Books  Find books that are similar to the given book. 
        /// </summary>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the book to which similar books should be found.</param>
        /// <param name="number">The number of similar books to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<bigbookapi.Client.ApiResponse<Object>> FindSimilarBooksWithHttpInfoAsync(decimal id, decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            bigbookapi.Client.RequestOptions localVarRequestOptions = new bigbookapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = bigbookapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = bigbookapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", bigbookapi.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "DefaultApi.FindSimilarBooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/{id}/similar", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSimilarBooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Book Information  Get all information about a certain book. 
        /// </summary>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetBookInformation(decimal id, int operationIndex = 0)
        {
            bigbookapi.Client.ApiResponse<Object> localVarResponse = GetBookInformationWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Book Information  Get all information about a certain book. 
        /// </summary>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public bigbookapi.Client.ApiResponse<Object> GetBookInformationWithHttpInfo(decimal id, int operationIndex = 0)
        {
            bigbookapi.Client.RequestOptions localVarRequestOptions = new bigbookapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = bigbookapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = bigbookapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", bigbookapi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetBookInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBookInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Book Information  Get all information about a certain book. 
        /// </summary>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetBookInformationAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            bigbookapi.Client.ApiResponse<Object> localVarResponse = await GetBookInformationWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Book Information  Get all information about a certain book. 
        /// </summary>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the book.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<bigbookapi.Client.ApiResponse<Object>> GetBookInformationWithHttpInfoAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            bigbookapi.Client.RequestOptions localVarRequestOptions = new bigbookapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = bigbookapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = bigbookapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", bigbookapi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetBookInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBookInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Authors  Search for book authors by name or partial name. The response contains the author&#39;s name and their id. You can then use the id in the book search. 
        /// </summary>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The (partial/beginning) name of the author. (optional)</param>
        /// <param name="offset">The number of authors to skip in range [0,100] (optional)</param>
        /// <param name="number">The number of authors to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SearchAuthors(string? name = default(string?), decimal? offset = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0)
        {
            bigbookapi.Client.ApiResponse<Object> localVarResponse = SearchAuthorsWithHttpInfo(name, offset, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Authors  Search for book authors by name or partial name. The response contains the author&#39;s name and their id. You can then use the id in the book search. 
        /// </summary>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The (partial/beginning) name of the author. (optional)</param>
        /// <param name="offset">The number of authors to skip in range [0,100] (optional)</param>
        /// <param name="number">The number of authors to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public bigbookapi.Client.ApiResponse<Object> SearchAuthorsWithHttpInfo(string? name = default(string?), decimal? offset = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0)
        {
            bigbookapi.Client.RequestOptions localVarRequestOptions = new bigbookapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = bigbookapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = bigbookapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "DefaultApi.SearchAuthors";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/search-authors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchAuthors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Authors  Search for book authors by name or partial name. The response contains the author&#39;s name and their id. You can then use the id in the book search. 
        /// </summary>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The (partial/beginning) name of the author. (optional)</param>
        /// <param name="offset">The number of authors to skip in range [0,100] (optional)</param>
        /// <param name="number">The number of authors to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SearchAuthorsAsync(string? name = default(string?), decimal? offset = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            bigbookapi.Client.ApiResponse<Object> localVarResponse = await SearchAuthorsWithHttpInfoAsync(name, offset, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Authors  Search for book authors by name or partial name. The response contains the author&#39;s name and their id. You can then use the id in the book search. 
        /// </summary>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The (partial/beginning) name of the author. (optional)</param>
        /// <param name="offset">The number of authors to skip in range [0,100] (optional)</param>
        /// <param name="number">The number of authors to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<bigbookapi.Client.ApiResponse<Object>> SearchAuthorsWithHttpInfoAsync(string? name = default(string?), decimal? offset = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            bigbookapi.Client.RequestOptions localVarRequestOptions = new bigbookapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = bigbookapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = bigbookapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "DefaultApi.SearchAuthors";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/search-authors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchAuthors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Books  Search and filter books based on matching a query, the ISBN, rating, and more fields. The query is semantically parsed using our own large ontology. That means you can search for \&quot;books about dogs\&quot; and will automatically also find books about \&quot;border collies\&quot; and other types without specifying them in the query. 
        /// </summary>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="earliestPublishYear">The books must have been published after this year. (optional)</param>
        /// <param name="latestPublishYear">The books must have been published before this year. (optional)</param>
        /// <param name="minRating">The minimum rating the book must have gotten in the interval [0,1]. (optional)</param>
        /// <param name="maxRating">The maximum rating the book must have gotten in the interval [0,1]. (optional)</param>
        /// <param name="genres">A comma-separated list of  genres. Only books from any of the given genres will be returned. (optional)</param>
        /// <param name="authors">A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate. (optional)</param>
        /// <param name="isbn">Only the book matching the ISBN-13 will be returned (optional)</param>
        /// <param name="oclc">Only the book matching the OCLC will be returned (optional)</param>
        /// <param name="sort">The sorting criteria (publish-date or rating). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="groupResults">Whether to group similar editions of the same book. (optional)</param>
        /// <param name="offset">The number of books to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of books to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SearchBooks(string? query = default(string?), decimal? earliestPublishYear = default(decimal?), decimal? latestPublishYear = default(decimal?), decimal? minRating = default(decimal?), decimal? maxRating = default(decimal?), string? genres = default(string?), string? authors = default(string?), string? isbn = default(string?), string? oclc = default(string?), string? sort = default(string?), string? sortDirection = default(string?), bool? groupResults = default(bool?), decimal? offset = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0)
        {
            bigbookapi.Client.ApiResponse<Object> localVarResponse = SearchBooksWithHttpInfo(query, earliestPublishYear, latestPublishYear, minRating, maxRating, genres, authors, isbn, oclc, sort, sortDirection, groupResults, offset, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Books  Search and filter books based on matching a query, the ISBN, rating, and more fields. The query is semantically parsed using our own large ontology. That means you can search for \&quot;books about dogs\&quot; and will automatically also find books about \&quot;border collies\&quot; and other types without specifying them in the query. 
        /// </summary>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="earliestPublishYear">The books must have been published after this year. (optional)</param>
        /// <param name="latestPublishYear">The books must have been published before this year. (optional)</param>
        /// <param name="minRating">The minimum rating the book must have gotten in the interval [0,1]. (optional)</param>
        /// <param name="maxRating">The maximum rating the book must have gotten in the interval [0,1]. (optional)</param>
        /// <param name="genres">A comma-separated list of  genres. Only books from any of the given genres will be returned. (optional)</param>
        /// <param name="authors">A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate. (optional)</param>
        /// <param name="isbn">Only the book matching the ISBN-13 will be returned (optional)</param>
        /// <param name="oclc">Only the book matching the OCLC will be returned (optional)</param>
        /// <param name="sort">The sorting criteria (publish-date or rating). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="groupResults">Whether to group similar editions of the same book. (optional)</param>
        /// <param name="offset">The number of books to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of books to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public bigbookapi.Client.ApiResponse<Object> SearchBooksWithHttpInfo(string? query = default(string?), decimal? earliestPublishYear = default(decimal?), decimal? latestPublishYear = default(decimal?), decimal? minRating = default(decimal?), decimal? maxRating = default(decimal?), string? genres = default(string?), string? authors = default(string?), string? isbn = default(string?), string? oclc = default(string?), string? sort = default(string?), string? sortDirection = default(string?), bool? groupResults = default(bool?), decimal? offset = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0)
        {
            bigbookapi.Client.RequestOptions localVarRequestOptions = new bigbookapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = bigbookapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = bigbookapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (earliestPublishYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "earliest-publish-year", earliestPublishYear));
            }
            if (latestPublishYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "latest-publish-year", latestPublishYear));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }
            if (maxRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "max-rating", maxRating));
            }
            if (genres != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "genres", genres));
            }
            if (authors != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "authors", authors));
            }
            if (isbn != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "isbn", isbn));
            }
            if (oclc != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "oclc", oclc));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "sort-direction", sortDirection));
            }
            if (groupResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "group-results", groupResults));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "DefaultApi.SearchBooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/search-books", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchBooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Books  Search and filter books based on matching a query, the ISBN, rating, and more fields. The query is semantically parsed using our own large ontology. That means you can search for \&quot;books about dogs\&quot; and will automatically also find books about \&quot;border collies\&quot; and other types without specifying them in the query. 
        /// </summary>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="earliestPublishYear">The books must have been published after this year. (optional)</param>
        /// <param name="latestPublishYear">The books must have been published before this year. (optional)</param>
        /// <param name="minRating">The minimum rating the book must have gotten in the interval [0,1]. (optional)</param>
        /// <param name="maxRating">The maximum rating the book must have gotten in the interval [0,1]. (optional)</param>
        /// <param name="genres">A comma-separated list of  genres. Only books from any of the given genres will be returned. (optional)</param>
        /// <param name="authors">A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate. (optional)</param>
        /// <param name="isbn">Only the book matching the ISBN-13 will be returned (optional)</param>
        /// <param name="oclc">Only the book matching the OCLC will be returned (optional)</param>
        /// <param name="sort">The sorting criteria (publish-date or rating). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="groupResults">Whether to group similar editions of the same book. (optional)</param>
        /// <param name="offset">The number of books to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of books to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SearchBooksAsync(string? query = default(string?), decimal? earliestPublishYear = default(decimal?), decimal? latestPublishYear = default(decimal?), decimal? minRating = default(decimal?), decimal? maxRating = default(decimal?), string? genres = default(string?), string? authors = default(string?), string? isbn = default(string?), string? oclc = default(string?), string? sort = default(string?), string? sortDirection = default(string?), bool? groupResults = default(bool?), decimal? offset = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            bigbookapi.Client.ApiResponse<Object> localVarResponse = await SearchBooksWithHttpInfoAsync(query, earliestPublishYear, latestPublishYear, minRating, maxRating, genres, authors, isbn, oclc, sort, sortDirection, groupResults, offset, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Books  Search and filter books based on matching a query, the ISBN, rating, and more fields. The query is semantically parsed using our own large ontology. That means you can search for \&quot;books about dogs\&quot; and will automatically also find books about \&quot;border collies\&quot; and other types without specifying them in the query. 
        /// </summary>
        /// <exception cref="bigbookapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="earliestPublishYear">The books must have been published after this year. (optional)</param>
        /// <param name="latestPublishYear">The books must have been published before this year. (optional)</param>
        /// <param name="minRating">The minimum rating the book must have gotten in the interval [0,1]. (optional)</param>
        /// <param name="maxRating">The maximum rating the book must have gotten in the interval [0,1]. (optional)</param>
        /// <param name="genres">A comma-separated list of  genres. Only books from any of the given genres will be returned. (optional)</param>
        /// <param name="authors">A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate. (optional)</param>
        /// <param name="isbn">Only the book matching the ISBN-13 will be returned (optional)</param>
        /// <param name="oclc">Only the book matching the OCLC will be returned (optional)</param>
        /// <param name="sort">The sorting criteria (publish-date or rating). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="groupResults">Whether to group similar editions of the same book. (optional)</param>
        /// <param name="offset">The number of books to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of books to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<bigbookapi.Client.ApiResponse<Object>> SearchBooksWithHttpInfoAsync(string? query = default(string?), decimal? earliestPublishYear = default(decimal?), decimal? latestPublishYear = default(decimal?), decimal? minRating = default(decimal?), decimal? maxRating = default(decimal?), string? genres = default(string?), string? authors = default(string?), string? isbn = default(string?), string? oclc = default(string?), string? sort = default(string?), string? sortDirection = default(string?), bool? groupResults = default(bool?), decimal? offset = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            bigbookapi.Client.RequestOptions localVarRequestOptions = new bigbookapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = bigbookapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = bigbookapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (earliestPublishYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "earliest-publish-year", earliestPublishYear));
            }
            if (latestPublishYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "latest-publish-year", latestPublishYear));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }
            if (maxRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "max-rating", maxRating));
            }
            if (genres != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "genres", genres));
            }
            if (authors != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "authors", authors));
            }
            if (isbn != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "isbn", isbn));
            }
            if (oclc != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "oclc", oclc));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "sort-direction", sortDirection));
            }
            if (groupResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "group-results", groupResults));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "DefaultApi.SearchBooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(bigbookapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/search-books", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchBooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
