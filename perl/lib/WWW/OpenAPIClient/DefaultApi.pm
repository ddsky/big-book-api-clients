=begin comment

Big Book API

Big Book API lets you semantically search over 4 million English books by text, genre, author, ISBN, and more. You can also find books that are similar to each other.

The version of the OpenAPI document: 1.0
Contact: mail@bigbookapi.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::DefaultApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# find_similar_books
#
# Find Similar Books
#
# @param double $id The id of the book to which similar books should be found. (required)
# @param double $number The number of similar books to return in range [1,100] (optional)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The id of the book to which similar books should be found.',
        required => '1',
    },
    'number' => {
        data_type => 'double',
        description => 'The number of similar books to return in range [1,100]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_similar_books' } = {
        summary => 'Find Similar Books',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub find_similar_books {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling find_similar_books");
    }

    # parse inputs
    my $_resource_path = '/{id}/similar';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_book_information
#
# Get Book Information
#
# @param double $id The id of the book. (required)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The id of the book.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_book_information' } = {
        summary => 'Get Book Information',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_book_information {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_book_information");
    }

    # parse inputs
    my $_resource_path = '/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# search_authors
#
# Search Authors
#
# @param string $name The (partial/beginning) name of the author. (optional)
# @param double $offset The number of authors to skip in range [0,100] (optional)
# @param double $number The number of authors to return in range [1,100] (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'The (partial/beginning) name of the author.',
        required => '0',
    },
    'offset' => {
        data_type => 'double',
        description => 'The number of authors to skip in range [0,100]',
        required => '0',
    },
    'number' => {
        data_type => 'double',
        description => 'The number of authors to return in range [1,100]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_authors' } = {
        summary => 'Search Authors',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub search_authors {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/search-authors';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# search_books
#
# Search Books
#
# @param string $query The search query. (optional)
# @param double $earliest_publish_year The books must have been published after this year. (optional)
# @param double $latest_publish_year The books must have been published before this year. (optional)
# @param double $min_rating The minimum rating the book must have gotten in the interval [0,1]. (optional)
# @param double $max_rating The maximum rating the book must have gotten in the interval [0,1]. (optional)
# @param string $genres A comma-separated list of  genres. Only books from any of the given genres will be returned. (optional)
# @param string $authors A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate. (optional)
# @param string $isbn Only the book matching the ISBN-13 will be returned (optional)
# @param string $oclc Only the book matching the OCLC will be returned (optional)
# @param string $sort The sorting criteria (publish-date or rating). (optional)
# @param string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
# @param boolean $group_results Whether to group similar editions of the same book. (optional)
# @param double $offset The number of books to skip in range [0,1000] (optional)
# @param double $number The number of books to return in range [1,100] (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'The search query.',
        required => '0',
    },
    'earliest_publish_year' => {
        data_type => 'double',
        description => 'The books must have been published after this year.',
        required => '0',
    },
    'latest_publish_year' => {
        data_type => 'double',
        description => 'The books must have been published before this year.',
        required => '0',
    },
    'min_rating' => {
        data_type => 'double',
        description => 'The minimum rating the book must have gotten in the interval [0,1].',
        required => '0',
    },
    'max_rating' => {
        data_type => 'double',
        description => 'The maximum rating the book must have gotten in the interval [0,1].',
        required => '0',
    },
    'genres' => {
        data_type => 'string',
        description => 'A comma-separated list of  genres. Only books from any of the given genres will be returned.',
        required => '0',
    },
    'authors' => {
        data_type => 'string',
        description => 'A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate.',
        required => '0',
    },
    'isbn' => {
        data_type => 'string',
        description => 'Only the book matching the ISBN-13 will be returned',
        required => '0',
    },
    'oclc' => {
        data_type => 'string',
        description => 'Only the book matching the OCLC will be returned',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'The sorting criteria (publish-date or rating).',
        required => '0',
    },
    'sort_direction' => {
        data_type => 'string',
        description => 'Whether to sort ascending or descending (ASC or DESC).',
        required => '0',
    },
    'group_results' => {
        data_type => 'boolean',
        description => 'Whether to group similar editions of the same book.',
        required => '0',
    },
    'offset' => {
        data_type => 'double',
        description => 'The number of books to skip in range [0,1000]',
        required => '0',
    },
    'number' => {
        data_type => 'double',
        description => 'The number of books to return in range [1,100]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_books' } = {
        summary => 'Search Books',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub search_books {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/search-books';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'earliest_publish_year'}) {
        $query_params->{'earliest-publish-year'} = $self->{api_client}->to_query_value($args{'earliest_publish_year'});
    }

    # query params
    if ( exists $args{'latest_publish_year'}) {
        $query_params->{'latest-publish-year'} = $self->{api_client}->to_query_value($args{'latest_publish_year'});
    }

    # query params
    if ( exists $args{'min_rating'}) {
        $query_params->{'min-rating'} = $self->{api_client}->to_query_value($args{'min_rating'});
    }

    # query params
    if ( exists $args{'max_rating'}) {
        $query_params->{'max-rating'} = $self->{api_client}->to_query_value($args{'max_rating'});
    }

    # query params
    if ( exists $args{'genres'}) {
        $query_params->{'genres'} = $self->{api_client}->to_query_value($args{'genres'});
    }

    # query params
    if ( exists $args{'authors'}) {
        $query_params->{'authors'} = $self->{api_client}->to_query_value($args{'authors'});
    }

    # query params
    if ( exists $args{'isbn'}) {
        $query_params->{'isbn'} = $self->{api_client}->to_query_value($args{'isbn'});
    }

    # query params
    if ( exists $args{'oclc'}) {
        $query_params->{'oclc'} = $self->{api_client}->to_query_value($args{'oclc'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'sort_direction'}) {
        $query_params->{'sort-direction'} = $self->{api_client}->to_query_value($args{'sort_direction'});
    }

    # query params
    if ( exists $args{'group_results'}) {
        $query_params->{'group-results'} = $self->{api_client}->to_query_value($args{'group_results'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

1;
