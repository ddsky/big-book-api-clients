# coding: utf-8

"""
    Big Book API

    Big Book API lets you semantically search over 4 million English books by text, genre, author, ISBN, and more. You can also find books that are similar to each other.

    The version of the OpenAPI document: 1.0
    Contact: mail@bigbookapi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Optional, Union
from typing_extensions import Annotated

from bigbookapi.api_client import ApiClient, RequestSerialized
from bigbookapi.api_response import ApiResponse
from bigbookapi.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def find_similar_books(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The id of the book to which similar books should be found.")],
        number: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of similar books to return in range [1,100]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Find Similar Books

         Find books that are similar to the given book. 

        :param id: The id of the book to which similar books should be found. (required)
        :type id: float
        :param number: The number of similar books to return in range [1,100]
        :type number: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_similar_books_serialize(
            id=id,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_similar_books_with_http_info(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The id of the book to which similar books should be found.")],
        number: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of similar books to return in range [1,100]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Find Similar Books

         Find books that are similar to the given book. 

        :param id: The id of the book to which similar books should be found. (required)
        :type id: float
        :param number: The number of similar books to return in range [1,100]
        :type number: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_similar_books_serialize(
            id=id,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_similar_books_without_preload_content(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The id of the book to which similar books should be found.")],
        number: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of similar books to return in range [1,100]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find Similar Books

         Find books that are similar to the given book. 

        :param id: The id of the book to which similar books should be found. (required)
        :type id: float
        :param number: The number of similar books to return in range [1,100]
        :type number: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_similar_books_serialize(
            id=id,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_similar_books_serialize(
        self,
        id,
        number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if number is not None:
            
            _query_params.append(('number', number))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'headerApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{id}/similar',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_book_information(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The id of the book.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Get Book Information

         Get all information about a certain book. 

        :param id: The id of the book. (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_book_information_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_book_information_with_http_info(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The id of the book.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Get Book Information

         Get all information about a certain book. 

        :param id: The id of the book. (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_book_information_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_book_information_without_preload_content(
        self,
        id: Annotated[Union[StrictFloat, StrictInt], Field(description="The id of the book.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Book Information

         Get all information about a certain book. 

        :param id: The id of the book. (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_book_information_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_book_information_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'headerApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_authors(
        self,
        name: Annotated[Optional[StrictStr], Field(description="The (partial/beginning) name of the author.")] = None,
        offset: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of authors to skip in range [0,100]")] = None,
        number: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of authors to return in range [1,100]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Search Authors

         Search for book authors by name or partial name. The response contains the author's name and their id. You can then use the id in the book search. 

        :param name: The (partial/beginning) name of the author.
        :type name: str
        :param offset: The number of authors to skip in range [0,100]
        :type offset: float
        :param number: The number of authors to return in range [1,100]
        :type number: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_authors_serialize(
            name=name,
            offset=offset,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_authors_with_http_info(
        self,
        name: Annotated[Optional[StrictStr], Field(description="The (partial/beginning) name of the author.")] = None,
        offset: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of authors to skip in range [0,100]")] = None,
        number: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of authors to return in range [1,100]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Search Authors

         Search for book authors by name or partial name. The response contains the author's name and their id. You can then use the id in the book search. 

        :param name: The (partial/beginning) name of the author.
        :type name: str
        :param offset: The number of authors to skip in range [0,100]
        :type offset: float
        :param number: The number of authors to return in range [1,100]
        :type number: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_authors_serialize(
            name=name,
            offset=offset,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_authors_without_preload_content(
        self,
        name: Annotated[Optional[StrictStr], Field(description="The (partial/beginning) name of the author.")] = None,
        offset: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of authors to skip in range [0,100]")] = None,
        number: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of authors to return in range [1,100]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search Authors

         Search for book authors by name or partial name. The response contains the author's name and their id. You can then use the id in the book search. 

        :param name: The (partial/beginning) name of the author.
        :type name: str
        :param offset: The number of authors to skip in range [0,100]
        :type offset: float
        :param number: The number of authors to return in range [1,100]
        :type number: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_authors_serialize(
            name=name,
            offset=offset,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_authors_serialize(
        self,
        name,
        offset,
        number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if name is not None:
            
            _query_params.append(('name', name))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if number is not None:
            
            _query_params.append(('number', number))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'headerApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search-authors',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_books(
        self,
        query: Annotated[Optional[StrictStr], Field(description="The search query.")] = None,
        earliest_publish_year: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The books must have been published after this year.")] = None,
        latest_publish_year: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The books must have been published before this year.")] = None,
        min_rating: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum rating the book must have gotten in the interval [0,1].")] = None,
        max_rating: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum rating the book must have gotten in the interval [0,1].")] = None,
        genres: Annotated[Optional[StrictStr], Field(description="A comma-separated list of  genres. Only books from any of the given genres will be returned.")] = None,
        authors: Annotated[Optional[StrictStr], Field(description="A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can't disambiguate.")] = None,
        isbn: Annotated[Optional[StrictStr], Field(description="Only the book matching the ISBN-13 will be returned")] = None,
        oclc: Annotated[Optional[StrictStr], Field(description="Only the book matching the OCLC will be returned")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="The sorting criteria (publish-date or rating).")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="Whether to sort ascending or descending (ASC or DESC).")] = None,
        group_results: Annotated[Optional[StrictBool], Field(description="Whether to group similar editions of the same book.")] = None,
        offset: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of books to skip in range [0,1000]")] = None,
        number: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of books to return in range [1,100]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Search Books

         Search and filter books based on matching a query, the ISBN, rating, and more fields. The query is semantically parsed using our own large ontology. That means you can search for \"books about dogs\" and will automatically also find books about \"border collies\" and other types without specifying them in the query. 

        :param query: The search query.
        :type query: str
        :param earliest_publish_year: The books must have been published after this year.
        :type earliest_publish_year: float
        :param latest_publish_year: The books must have been published before this year.
        :type latest_publish_year: float
        :param min_rating: The minimum rating the book must have gotten in the interval [0,1].
        :type min_rating: float
        :param max_rating: The maximum rating the book must have gotten in the interval [0,1].
        :type max_rating: float
        :param genres: A comma-separated list of  genres. Only books from any of the given genres will be returned.
        :type genres: str
        :param authors: A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can't disambiguate.
        :type authors: str
        :param isbn: Only the book matching the ISBN-13 will be returned
        :type isbn: str
        :param oclc: Only the book matching the OCLC will be returned
        :type oclc: str
        :param sort: The sorting criteria (publish-date or rating).
        :type sort: str
        :param sort_direction: Whether to sort ascending or descending (ASC or DESC).
        :type sort_direction: str
        :param group_results: Whether to group similar editions of the same book.
        :type group_results: bool
        :param offset: The number of books to skip in range [0,1000]
        :type offset: float
        :param number: The number of books to return in range [1,100]
        :type number: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_books_serialize(
            query=query,
            earliest_publish_year=earliest_publish_year,
            latest_publish_year=latest_publish_year,
            min_rating=min_rating,
            max_rating=max_rating,
            genres=genres,
            authors=authors,
            isbn=isbn,
            oclc=oclc,
            sort=sort,
            sort_direction=sort_direction,
            group_results=group_results,
            offset=offset,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_books_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="The search query.")] = None,
        earliest_publish_year: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The books must have been published after this year.")] = None,
        latest_publish_year: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The books must have been published before this year.")] = None,
        min_rating: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum rating the book must have gotten in the interval [0,1].")] = None,
        max_rating: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum rating the book must have gotten in the interval [0,1].")] = None,
        genres: Annotated[Optional[StrictStr], Field(description="A comma-separated list of  genres. Only books from any of the given genres will be returned.")] = None,
        authors: Annotated[Optional[StrictStr], Field(description="A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can't disambiguate.")] = None,
        isbn: Annotated[Optional[StrictStr], Field(description="Only the book matching the ISBN-13 will be returned")] = None,
        oclc: Annotated[Optional[StrictStr], Field(description="Only the book matching the OCLC will be returned")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="The sorting criteria (publish-date or rating).")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="Whether to sort ascending or descending (ASC or DESC).")] = None,
        group_results: Annotated[Optional[StrictBool], Field(description="Whether to group similar editions of the same book.")] = None,
        offset: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of books to skip in range [0,1000]")] = None,
        number: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of books to return in range [1,100]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Search Books

         Search and filter books based on matching a query, the ISBN, rating, and more fields. The query is semantically parsed using our own large ontology. That means you can search for \"books about dogs\" and will automatically also find books about \"border collies\" and other types without specifying them in the query. 

        :param query: The search query.
        :type query: str
        :param earliest_publish_year: The books must have been published after this year.
        :type earliest_publish_year: float
        :param latest_publish_year: The books must have been published before this year.
        :type latest_publish_year: float
        :param min_rating: The minimum rating the book must have gotten in the interval [0,1].
        :type min_rating: float
        :param max_rating: The maximum rating the book must have gotten in the interval [0,1].
        :type max_rating: float
        :param genres: A comma-separated list of  genres. Only books from any of the given genres will be returned.
        :type genres: str
        :param authors: A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can't disambiguate.
        :type authors: str
        :param isbn: Only the book matching the ISBN-13 will be returned
        :type isbn: str
        :param oclc: Only the book matching the OCLC will be returned
        :type oclc: str
        :param sort: The sorting criteria (publish-date or rating).
        :type sort: str
        :param sort_direction: Whether to sort ascending or descending (ASC or DESC).
        :type sort_direction: str
        :param group_results: Whether to group similar editions of the same book.
        :type group_results: bool
        :param offset: The number of books to skip in range [0,1000]
        :type offset: float
        :param number: The number of books to return in range [1,100]
        :type number: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_books_serialize(
            query=query,
            earliest_publish_year=earliest_publish_year,
            latest_publish_year=latest_publish_year,
            min_rating=min_rating,
            max_rating=max_rating,
            genres=genres,
            authors=authors,
            isbn=isbn,
            oclc=oclc,
            sort=sort,
            sort_direction=sort_direction,
            group_results=group_results,
            offset=offset,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_books_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="The search query.")] = None,
        earliest_publish_year: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The books must have been published after this year.")] = None,
        latest_publish_year: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The books must have been published before this year.")] = None,
        min_rating: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum rating the book must have gotten in the interval [0,1].")] = None,
        max_rating: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum rating the book must have gotten in the interval [0,1].")] = None,
        genres: Annotated[Optional[StrictStr], Field(description="A comma-separated list of  genres. Only books from any of the given genres will be returned.")] = None,
        authors: Annotated[Optional[StrictStr], Field(description="A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can't disambiguate.")] = None,
        isbn: Annotated[Optional[StrictStr], Field(description="Only the book matching the ISBN-13 will be returned")] = None,
        oclc: Annotated[Optional[StrictStr], Field(description="Only the book matching the OCLC will be returned")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="The sorting criteria (publish-date or rating).")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="Whether to sort ascending or descending (ASC or DESC).")] = None,
        group_results: Annotated[Optional[StrictBool], Field(description="Whether to group similar editions of the same book.")] = None,
        offset: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of books to skip in range [0,1000]")] = None,
        number: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of books to return in range [1,100]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search Books

         Search and filter books based on matching a query, the ISBN, rating, and more fields. The query is semantically parsed using our own large ontology. That means you can search for \"books about dogs\" and will automatically also find books about \"border collies\" and other types without specifying them in the query. 

        :param query: The search query.
        :type query: str
        :param earliest_publish_year: The books must have been published after this year.
        :type earliest_publish_year: float
        :param latest_publish_year: The books must have been published before this year.
        :type latest_publish_year: float
        :param min_rating: The minimum rating the book must have gotten in the interval [0,1].
        :type min_rating: float
        :param max_rating: The maximum rating the book must have gotten in the interval [0,1].
        :type max_rating: float
        :param genres: A comma-separated list of  genres. Only books from any of the given genres will be returned.
        :type genres: str
        :param authors: A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can't disambiguate.
        :type authors: str
        :param isbn: Only the book matching the ISBN-13 will be returned
        :type isbn: str
        :param oclc: Only the book matching the OCLC will be returned
        :type oclc: str
        :param sort: The sorting criteria (publish-date or rating).
        :type sort: str
        :param sort_direction: Whether to sort ascending or descending (ASC or DESC).
        :type sort_direction: str
        :param group_results: Whether to group similar editions of the same book.
        :type group_results: bool
        :param offset: The number of books to skip in range [0,1000]
        :type offset: float
        :param number: The number of books to return in range [1,100]
        :type number: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_books_serialize(
            query=query,
            earliest_publish_year=earliest_publish_year,
            latest_publish_year=latest_publish_year,
            min_rating=min_rating,
            max_rating=max_rating,
            genres=genres,
            authors=authors,
            isbn=isbn,
            oclc=oclc,
            sort=sort,
            sort_direction=sort_direction,
            group_results=group_results,
            offset=offset,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_books_serialize(
        self,
        query,
        earliest_publish_year,
        latest_publish_year,
        min_rating,
        max_rating,
        genres,
        authors,
        isbn,
        oclc,
        sort,
        sort_direction,
        group_results,
        offset,
        number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if earliest_publish_year is not None:
            
            _query_params.append(('earliest-publish-year', earliest_publish_year))
            
        if latest_publish_year is not None:
            
            _query_params.append(('latest-publish-year', latest_publish_year))
            
        if min_rating is not None:
            
            _query_params.append(('min-rating', min_rating))
            
        if max_rating is not None:
            
            _query_params.append(('max-rating', max_rating))
            
        if genres is not None:
            
            _query_params.append(('genres', genres))
            
        if authors is not None:
            
            _query_params.append(('authors', authors))
            
        if isbn is not None:
            
            _query_params.append(('isbn', isbn))
            
        if oclc is not None:
            
            _query_params.append(('oclc', oclc))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if sort_direction is not None:
            
            _query_params.append(('sort-direction', sort_direction))
            
        if group_results is not None:
            
            _query_params.append(('group-results', group_results))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if number is not None:
            
            _query_params.append(('number', number))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'headerApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search-books',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


