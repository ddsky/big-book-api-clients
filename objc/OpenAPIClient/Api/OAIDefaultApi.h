#import <Foundation/Foundation.h>
#import "OAIApi.h"

/**
* Big Book API
* The world's book wrapped into a single API.
*
* The version of the OpenAPI document: 1.0
* Contact: mail@bigbookapi.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIDefaultApi: NSObject <OAIApi>

extern NSString* kOAIDefaultApiErrorDomain;
extern NSInteger kOAIDefaultApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Find Similar Books
///  Find books that are similar to the given book. 
///
/// @param _id The id of the book to which similar books should be found.
/// @param number The number of similar books to return in range [1,100] (optional)
/// 
///  code:200 message:"Success",
///  code:401 message:"Unauthorized",
///  code:402 message:"Payment Required",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:429 message:"Too Many Requests"
///
/// @return NSObject*
-(NSURLSessionTask*) findSimilarBooksWithId: (NSNumber*) _id
    number: (NSNumber*) number
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Get Book Information
///  Get all information about a certain book. 
///
/// @param _id The id of the book.
/// 
///  code:200 message:"Success",
///  code:401 message:"Unauthorized",
///  code:402 message:"Payment Required",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:429 message:"Too Many Requests"
///
/// @return NSObject*
-(NSURLSessionTask*) getBookInformationWithId: (NSNumber*) _id
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Search Authors
///  Search for book authors by name or partial name. The response contains the author's name and their id. You can then use the id in the book search. 
///
/// @param name The (partial/beginning) name of the author. (optional)
/// @param offset The number of authors to skip in range [0,100] (optional)
/// @param number The number of authors to return in range [1,100] (optional)
/// 
///  code:200 message:"Success",
///  code:401 message:"Unauthorized",
///  code:402 message:"Payment Required",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:429 message:"Too Many Requests"
///
/// @return NSObject*
-(NSURLSessionTask*) searchAuthorsWithName: (NSString*) name
    offset: (NSNumber*) offset
    number: (NSNumber*) number
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Search Books
///  Search and filter books based on matching a query, the ISBN, rating, and more fields. The query is semantically parsed using our own large ontology. That means you can search for \"books about dogs\" and will automatically also find books about \"border collies\" and other types without specifying them in the query. 
///
/// @param query The search query. (optional)
/// @param earliestPublishYear The books must have been published after this year. (optional)
/// @param latestPublishYear The books must have been published before this year. (optional)
/// @param minRating The minimum rating the book must have gotten in the interval [0,1]. (optional)
/// @param maxRating The maximum rating the book must have gotten in the interval [0,1]. (optional)
/// @param genres A comma-separated list of  genres. Only books from any of the given genres will be returned. (optional)
/// @param authors A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate. (optional)
/// @param isbn Only the book matching the ISBN-13 will be returned (optional)
/// @param oclc Only the book matching the OCLC will be returned (optional)
/// @param sort The sorting criteria (publish-date or rating). (optional)
/// @param sortDirection Whether to sort ascending or descending (ASC or DESC). (optional)
/// @param offset The number of books to skip in range [0,1000] (optional)
/// @param number The number of books to return in range [1,100] (optional)
/// 
///  code:200 message:"Success",
///  code:401 message:"Unauthorized",
///  code:402 message:"Payment Required",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:429 message:"Too Many Requests"
///
/// @return NSObject*
-(NSURLSessionTask*) searchBooksWithQuery: (NSString*) query
    earliestPublishYear: (NSNumber*) earliestPublishYear
    latestPublishYear: (NSNumber*) latestPublishYear
    minRating: (NSNumber*) minRating
    maxRating: (NSNumber*) maxRating
    genres: (NSString*) genres
    authors: (NSString*) authors
    isbn: (NSString*) isbn
    oclc: (NSString*) oclc
    sort: (NSString*) sort
    sortDirection: (NSString*) sortDirection
    offset: (NSNumber*) offset
    number: (NSNumber*) number
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;



@end
