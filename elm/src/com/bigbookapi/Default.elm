{-
   Big Book API
   The world's book wrapped into a single API.

   The version of the OpenAPI document: 1.0
   Contact: mail@bigbookapi.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.Default exposing
    ( findSimilarBooks
    , getBookInformation
    , searchAuthors
    , searchBooks
    )

import Api
import Api.Data
import Dict
import Http
import Json.Decode
import Json.Encode



{-|  Find books that are similar to the given book. 
-}
findSimilarBooks : Float -> Maybe Float -> Api.Request (Dict.Dict String Api.Data.Object)
findSimilarBooks id_path number_query =
    Api.request
        "GET"
        "/{id}/similar"
        [ ( "id", String.fromFloat id_path ) ]
        [ ( "number", Maybe.map String.fromFloat number_query ) ]
        []
        Nothing
        (Json.Decode.dict )



{-|  Get all information about a certain book. 
-}
getBookInformation : Float -> Api.Request (Dict.Dict String Api.Data.Object)
getBookInformation id_path =
    Api.request
        "GET"
        "/{id}"
        [ ( "id", String.fromFloat id_path ) ]
        []
        []
        Nothing
        (Json.Decode.dict )



{-|  Search for book authors by name or partial name. The response contains the author's name and their id. You can then use the id in the book search. 
-}
searchAuthors : Maybe String -> Maybe Float -> Maybe Float -> Api.Request (Dict.Dict String Api.Data.Object)
searchAuthors name_query offset_query number_query =
    Api.request
        "GET"
        "/search-authors"
        []
        [ ( "name", Maybe.map identity name_query ), ( "offset", Maybe.map String.fromFloat offset_query ), ( "number", Maybe.map String.fromFloat number_query ) ]
        []
        Nothing
        (Json.Decode.dict )



{-|  Search and filter books based on matching a query, the ISBN, rating, and more fields. The query is semantically parsed using our own large ontology. That means you can search for \"books about dogs\" and will automatically also find books about \"border collies\" and other types without specifying them in the query. 
-}
searchBooks : Maybe String -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe Float -> Maybe Float -> Api.Request (Dict.Dict String Api.Data.Object)
searchBooks query_query earliestPublishYear_query latestPublishYear_query minRating_query maxRating_query genres_query authors_query isbn_query oclc_query sort_query sortDirection_query offset_query number_query =
    Api.request
        "GET"
        "/search-books"
        []
        [ ( "query", Maybe.map identity query_query ), ( "earliest-publish-year", Maybe.map String.fromFloat earliestPublishYear_query ), ( "latest-publish-year", Maybe.map String.fromFloat latestPublishYear_query ), ( "min-rating", Maybe.map String.fromFloat minRating_query ), ( "max-rating", Maybe.map String.fromFloat maxRating_query ), ( "genres", Maybe.map identity genres_query ), ( "authors", Maybe.map identity authors_query ), ( "isbn", Maybe.map identity isbn_query ), ( "oclc", Maybe.map identity oclc_query ), ( "sort", Maybe.map identity sort_query ), ( "sort-direction", Maybe.map identity sortDirection_query ), ( "offset", Maybe.map String.fromFloat offset_query ), ( "number", Maybe.map String.fromFloat number_query ) ]
        []
        Nothing
        (Json.Decode.dict )
