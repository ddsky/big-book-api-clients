/*
 * Big Book API
 * The world's book wrapped into a single API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@bigbookapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bigbookapi;

import com.bigbookapi.client.ApiException;
import java.math.BigDecimal;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Find Similar Books
     *
     *  Find books that are similar to the given book. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findSimilarBooksTest() throws ApiException {
        BigDecimal id = null;
        BigDecimal number = null;
                Object response = api.findSimilarBooks(id, number);
        // TODO: test validations
    }
    
    /**
     * Get Book Information
     *
     *  Get all information about a certain book. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBookInformationTest() throws ApiException {
        BigDecimal id = null;
                Object response = api.getBookInformation(id);
        // TODO: test validations
    }
    
    /**
     * Search Authors
     *
     *  Search for book authors by name or partial name. The response contains the author&#39;s name and their id. You can then use the id in the book search. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchAuthorsTest() throws ApiException {
        String name = null;
        BigDecimal offset = null;
        BigDecimal number = null;
                Object response = api.searchAuthors(name, offset, number);
        // TODO: test validations
    }
    
    /**
     * Search Books
     *
     *  Search and filter books based on matching a query, the ISBN, rating, and more fields. The query is semantically parsed using our own large ontology. That means you can search for \&quot;books about dogs\&quot; and will automatically also find books about \&quot;border collies\&quot; and other types without specifying them in the query. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchBooksTest() throws ApiException {
        String query = null;
        BigDecimal earliestPublishYear = null;
        BigDecimal latestPublishYear = null;
        BigDecimal minRating = null;
        BigDecimal maxRating = null;
        String genres = null;
        String authors = null;
        String isbn = null;
        String oclc = null;
        String sort = null;
        String sortDirection = null;
        BigDecimal offset = null;
        BigDecimal number = null;
                Object response = api.searchBooks(query, earliestPublishYear, latestPublishYear, minRating, maxRating, genres, authors, isbn, oclc, sort, sortDirection, offset, number);
        // TODO: test validations
    }
    
}
